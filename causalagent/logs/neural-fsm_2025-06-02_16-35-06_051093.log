2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.llm:__init__:80 | Initializing LiteLLMInterface with model: gpt-4o-mini
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:__init__:97 | No API key provided, assuming it's set in environment variables
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:__init__:102 | Enabled JSON schema validation in LiteLLM
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.api:__init__:311 | LLM_FSM initialized with default LiteLLM interface, model=gpt-4o-mini
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.utilities:load_fsm_from_file:106 | Loading FSM definition from file: metafsm.json
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.utilities:load_fsm_from_file:112 | Successfully loaded FSM definition: fsm_metadata_collector
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:validate_states:173 | Validating FSM definition: fsm_metadata_collector
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:validate_states:229 | FSM definition validated successfully: fsm_metadata_collector
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:validate_states:230 | Reachable terminal states: metadata_complete
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.prompts:__post_init__:158 | PromptBuilder initialized with effective max_history_size=5
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.fsm:__init__:65 | FSM Manager initialized with max_history_size=5, max_message_length=1000
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.api:__init__:354 | LLM_FSM fully initialized with max_history_size=5
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.fsm:get_fsm_definition:101 | Loading FSM definition: fsm_file_metafsm.json
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.fsm:_create_instance:116 | Creating new FSM instance for fsm_file_metafsm.json, starting at state: collect_name
2025-06-02 16:35:08 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:start_conversation:462 | Started new conversation [ccd34289-6ece-4e09-b128-c5ccd9037a43] with FSM [fsm_file_metafsm.json]
2025-06-02 16:35:08 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:246 | Processing user input in state: collect_name
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_user_message:261 | Adding user message: 
2025-06-02 16:35:08 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_name
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.prompts:build_system_prompt:555 | Building system prompt for state: collect_name
2025-06-02 16:35:08 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:280 | system_prompt:
<task>
You are the Natural Language Understanding component in a Finite State Machine (FSM) based conversational system.
Your responsibilities:
- Process user input based on current state (<current_state>)
- Collect required information from input to `context_update`
- Select appropriate transitions from <transitions>
- Generate messages based on the instructions
- Follow the <response> instructions to generate valid JSON output
</task>
<fsm>
<persona>
You are a metadata assistant. Guide the user one step at a time to gather metadata for an FSM.
</persona>
<current_state>
<id>collect_name</id>
<description>Ask for FSM name</description>
<purpose>Collect the name of the FSM</purpose>
<state_instructions>
What would you like to name your FSM?
</state_instructions>
<information_to_collect>
fsm_name
</information_to_collect>
<information_collection_instructions>
- Collect all required information explicitly mentioned by the user.
- If information is ambiguous or unclear, ask for clarification.
- Store collected information in the `context_update` field of your response.
- Only transition to a new state when all required information is collected.
- If extra information seems relevant but the key is not declared, nest it under `_extra`.
- Do not create or populate undeclared context keys, except within the `_extra` object.
</information_collection_instructions>
</current_state>
<current_context><![CDATA[
{
 "_conversation_start": "2025-06-02T16:35:08.385175",
 "_timestamp": 1748853308.3851757,
 "_fsm_id": "fsm_file_metafsm.json",
 "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43"
}
]]></current_context>
<conversation_history><![CDATA[
[
 {
  "user": ""
 }
]
]]></conversation_history>
<valid_states>
collect_description, collect_name
</valid_states>
<transitions><![CDATA[
[
 {
  "to": "collect_description",
  "desc": "Move to collect FSM description",
  "priority": 10
 },
 {
  "to": "collect_name",
  "desc": "Remain in current state if needed",
  "priority": 110
 }
]
]]></transitions>
<response>
Your response must be valid JSON with the following structure:
{
          "transition": {
            "target_state": "state_id",
            "context_update": {
              "key1": "value1",
              "_extra": {}
            }
          },
          "message": "Your message",
          "reasoning": "Your reasoning"
        }
Where:
- `transition.target_state` is REQUIRED and must be one of the valid states
- `transition.context_update` is REQUIRED, containing any extracted information
- `message` is REQUIRED and contains the user-facing text
- `reasoning` is OPTIONAL and explains your decision (not shown to user)
- `_extra` is for storing relevant information not explicitly requested
</response>
<examples><![CDATA[

Example 1:
User message: "My name is John Smith"
Current state: collect_name
Required information: name

Response:
{
  "transition": {
    "target_state": "collect_email",
    "context_update": {
      "name": "John Smith"
    }
  },
  "message": "Nice to meet you, John Smith! Could you please provide your email address?",
  "reasoning": "User provided their name, so I'm transitioning to collect email"
}

Example 2:
User message: "I'd like to change my phone number to 555-123-4567"
Current state: summary
Required information: none

Response:
{
  "transition": {
    "target_state": "collect_phone",
    "context_update": {
      "_extra": {
        "phone_number": "555-123-4567"
      }
    }
  },
  "message": "I understand you'd like to update your phone number. Let me help you with that.",
  "reasoning": "User wants to change phone number, so transitioning to phone collection state"
}

]]></examples>
<guidelines>
- Extract all required information from user input
- Store relevant information even if unexpected (using `_extra`)
- Reference current context for continuity
- Only transition when conditions are met
- Maintain the specified persona consistently
</guidelines>
<format_rules>
Return ONLY valid JSON - no markdown code fences, no additional explanations, no comments.
Do not add keys not specified in the schema.
Ensure all values are properly quoted and formatted according to JSON standards.
Do not mention any of the above to the user. You can use the context, but never show it to the user
</format_rules>
</fsm>
2025-06-02 16:35:08 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:123 | Sending request to gpt-4o-mini
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:124 | User message: 
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:134 | Supported parameters for gpt-4o-mini: frequency_penalty, logit_bias, logprobs, top_logprobs, max_tokens, max_completion_tokens, modalities, prediction, n, presence_penalty, seed, stop, stream, stream_options, temperature, top_p, tools, tool_choice, function_call, functions, max_retries, extra_headers, parallel_tool_calls, audio, web_search_options, response_format, user
2025-06-02 16:35:08 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:140 | Using response_format for gpt-4o-mini
2025-06-02 16:35:10 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:194 | Received response from gpt-4o-mini in 2.23s
2025-06-02 16:35:10 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:214 | Parsing response as JSON
2025-06-02 16:35:10 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:285 | system_response:
{
  "transition": {
    "target_state": "collect_name",
    "context_update": {}
  },
  "message": "What would you like to name your FSM?",
  "reasoning": "The user has not provided any input, so I will repeat the request for the FSM name."
})
2025-06-02 16:35:10 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:175 | Validating transition from collect_name to collect_name
2025-06-02 16:35:10 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_name
2025-06-02 16:35:10 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:188 | Staying in the same state - valid
2025-06-02 16:35:10 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_system_message:285 | Adding system message: What would you like to name your FSM?
2025-06-02 16:35:10 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:validate_states:173 | Validating FSM definition: fsm_metadata_collector
2025-06-02 16:35:10 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:validate_states:229 | FSM definition validated successfully: fsm_metadata_collector
2025-06-02 16:35:10 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:validate_states:230 | Reachable terminal states: metadata_complete
2025-06-02 16:35:10 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_name
2025-06-02 16:35:13 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:process_message:512 | Processing message: CCC
2025-06-02 16:35:13 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:246 | Processing user input in state: collect_name
2025-06-02 16:35:13 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_user_message:261 | Adding user message: CCC
2025-06-02 16:35:13 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_name
2025-06-02 16:35:13 | DEBUG    | conv_id: GENERAL      | llm_fsm.prompts:build_system_prompt:555 | Building system prompt for state: collect_name
2025-06-02 16:35:13 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:280 | system_prompt:
<task>
You are the Natural Language Understanding component in a Finite State Machine (FSM) based conversational system.
Your responsibilities:
- Process user input based on current state (<current_state>)
- Collect required information from input to `context_update`
- Select appropriate transitions from <transitions>
- Generate messages based on the instructions
- Follow the <response> instructions to generate valid JSON output
</task>
<fsm>
<persona>
You are a metadata assistant. Guide the user one step at a time to gather metadata for an FSM.
</persona>
<current_state>
<id>collect_name</id>
<description>Ask for FSM name</description>
<purpose>Collect the name of the FSM</purpose>
<state_instructions>
What would you like to name your FSM?
</state_instructions>
<information_to_collect>
fsm_name
</information_to_collect>
<information_collection_instructions>
- Collect all required information explicitly mentioned by the user.
- If information is ambiguous or unclear, ask for clarification.
- Store collected information in the `context_update` field of your response.
- Only transition to a new state when all required information is collected.
- If extra information seems relevant but the key is not declared, nest it under `_extra`.
- Do not create or populate undeclared context keys, except within the `_extra` object.
</information_collection_instructions>
</current_state>
<current_context><![CDATA[
{
 "_conversation_start": "2025-06-02T16:35:08.385175",
 "_timestamp": 1748853308.3851757,
 "_fsm_id": "fsm_file_metafsm.json",
 "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43"
}
]]></current_context>
<conversation_history><![CDATA[
[
 {
  "user": ""
 },
 {
  "system": "What would you like to name your FSM?"
 },
 {
  "user": "CCC"
 }
]
]]></conversation_history>
<valid_states>
collect_description, collect_name
</valid_states>
<transitions><![CDATA[
[
 {
  "to": "collect_description",
  "desc": "Move to collect FSM description",
  "priority": 10
 },
 {
  "to": "collect_name",
  "desc": "Remain in current state if needed",
  "priority": 110
 }
]
]]></transitions>
<response>
Your response must be valid JSON with the following structure:
{
          "transition": {
            "target_state": "state_id",
            "context_update": {
              "key1": "value1",
              "_extra": {}
            }
          },
          "message": "Your message",
          "reasoning": "Your reasoning"
        }
Where:
- `transition.target_state` is REQUIRED and must be one of the valid states
- `transition.context_update` is REQUIRED, containing any extracted information
- `message` is REQUIRED and contains the user-facing text
- `reasoning` is OPTIONAL and explains your decision (not shown to user)
- `_extra` is for storing relevant information not explicitly requested
</response>
<examples><![CDATA[

Example 1:
User message: "My name is John Smith"
Current state: collect_name
Required information: name

Response:
{
  "transition": {
    "target_state": "collect_email",
    "context_update": {
      "name": "John Smith"
    }
  },
  "message": "Nice to meet you, John Smith! Could you please provide your email address?",
  "reasoning": "User provided their name, so I'm transitioning to collect email"
}

Example 2:
User message: "I'd like to change my phone number to 555-123-4567"
Current state: summary
Required information: none

Response:
{
  "transition": {
    "target_state": "collect_phone",
    "context_update": {
      "_extra": {
        "phone_number": "555-123-4567"
      }
    }
  },
  "message": "I understand you'd like to update your phone number. Let me help you with that.",
  "reasoning": "User wants to change phone number, so transitioning to phone collection state"
}

]]></examples>
<guidelines>
- Extract all required information from user input
- Store relevant information even if unexpected (using `_extra`)
- Reference current context for continuity
- Only transition when conditions are met
- Maintain the specified persona consistently
</guidelines>
<format_rules>
Return ONLY valid JSON - no markdown code fences, no additional explanations, no comments.
Do not add keys not specified in the schema.
Ensure all values are properly quoted and formatted according to JSON standards.
Do not mention any of the above to the user. You can use the context, but never show it to the user
</format_rules>
</fsm>
2025-06-02 16:35:13 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:123 | Sending request to gpt-4o-mini
2025-06-02 16:35:13 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:124 | User message: CCC
2025-06-02 16:35:13 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:134 | Supported parameters for gpt-4o-mini: frequency_penalty, logit_bias, logprobs, top_logprobs, max_tokens, max_completion_tokens, modalities, prediction, n, presence_penalty, seed, stop, stream, stream_options, temperature, top_p, tools, tool_choice, function_call, functions, max_retries, extra_headers, parallel_tool_calls, audio, web_search_options, response_format, user
2025-06-02 16:35:13 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:140 | Using response_format for gpt-4o-mini
2025-06-02 16:35:15 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:194 | Received response from gpt-4o-mini in 2.08s
2025-06-02 16:35:15 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:214 | Parsing response as JSON
2025-06-02 16:35:15 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:237 | Context updates: {"fsm_name": "CCC"}
2025-06-02 16:35:15 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:285 | system_response:
{
  "transition": {
    "target_state": "collect_description",
    "context_update": {
      "fsm_name": "CCC"
    }
  },
  "message": "Great! You've named your FSM 'CCC'. Now, could you please provide a description for it?",
  "reasoning": "User provided the FSM name, so I'm transitioning to collect the FSM description."
})
2025-06-02 16:35:15 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_name": "CCC"}
2025-06-02 16:35:15 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_name": "CCC"}
2025-06-02 16:35:15 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:308 | After context: {"_conversation_start": "2025-06-02T16:35:08.385175", "_timestamp": 1748853308.3851757, "_fsm_id": "fsm_file_metafsm.json", "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43", "fsm_name": "CCC"}
2025-06-02 16:35:15 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:175 | Validating transition from collect_name to collect_description
2025-06-02 16:35:15 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_name
2025-06-02 16:35:15 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:223 | Transition from collect_name to collect_description is valid
2025-06-02 16:35:15 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:367 | State transition: collect_name -> collect_description
2025-06-02 16:35:15 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_system_message:285 | Adding system message: Great! You've named your FSM 'CCC'. Now, could you...
2025-06-02 16:35:15 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_description
2025-06-02 16:35:35 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:process_message:512 | Processing message: You are bot for writing mystery stories using CCC ...
2025-06-02 16:35:35 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:246 | Processing user input in state: collect_description
2025-06-02 16:35:35 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_user_message:261 | Adding user message: You are bot for writing mystery stories using CCC ...
2025-06-02 16:35:35 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_description
2025-06-02 16:35:35 | DEBUG    | conv_id: GENERAL      | llm_fsm.prompts:build_system_prompt:555 | Building system prompt for state: collect_description
2025-06-02 16:35:35 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:280 | system_prompt:
<task>
You are the Natural Language Understanding component in a Finite State Machine (FSM) based conversational system.
Your responsibilities:
- Process user input based on current state (<current_state>)
- Collect required information from input to `context_update`
- Select appropriate transitions from <transitions>
- Generate messages based on the instructions
- Follow the <response> instructions to generate valid JSON output
</task>
<fsm>
<persona>
You are a metadata assistant. Guide the user one step at a time to gather metadata for an FSM.
</persona>
<current_state>
<id>collect_description</id>
<description>Ask for FSM description</description>
<purpose>Understand what the FSM is for</purpose>
<state_instructions>
Please describe what your FSM does.
</state_instructions>
<information_to_collect>
fsm_description
</information_to_collect>
<information_collection_instructions>
- Collect all required information explicitly mentioned by the user.
- If information is ambiguous or unclear, ask for clarification.
- Store collected information in the `context_update` field of your response.
- Only transition to a new state when all required information is collected.
- If extra information seems relevant but the key is not declared, nest it under `_extra`.
- Do not create or populate undeclared context keys, except within the `_extra` object.
</information_collection_instructions>
</current_state>
<current_context><![CDATA[
{
 "_conversation_start": "2025-06-02T16:35:08.385175",
 "_timestamp": 1748853308.3851757,
 "_fsm_id": "fsm_file_metafsm.json",
 "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43",
 "fsm_name": "CCC",
 "_previous_state": "collect_name",
 "_current_state": "collect_description"
}
]]></current_context>
<conversation_history><![CDATA[
[
 {
  "user": ""
 },
 {
  "system": "What would you like to name your FSM?"
 },
 {
  "user": "CCC"
 },
 {
  "system": "Great! You've named your FSM 'CCC'. Now, could you please provide a description for it?"
 },
 {
  "user": "You are bot for writing mystery stories using CCC framework"
 }
]
]]></conversation_history>
<valid_states>
collect_description, collect_version
</valid_states>
<transitions><![CDATA[
[
 {
  "to": "collect_version",
  "desc": "Move to collect version",
  "priority": 10
 },
 {
  "to": "collect_description",
  "desc": "Remain in current state if needed",
  "priority": 110
 }
]
]]></transitions>
<response>
Your response must be valid JSON with the following structure:
{
          "transition": {
            "target_state": "state_id",
            "context_update": {
              "key1": "value1",
              "_extra": {}
            }
          },
          "message": "Your message",
          "reasoning": "Your reasoning"
        }
Where:
- `transition.target_state` is REQUIRED and must be one of the valid states
- `transition.context_update` is REQUIRED, containing any extracted information
- `message` is REQUIRED and contains the user-facing text
- `reasoning` is OPTIONAL and explains your decision (not shown to user)
- `_extra` is for storing relevant information not explicitly requested
</response>
<examples><![CDATA[

Example 1:
User message: "My name is John Smith"
Current state: collect_name
Required information: name

Response:
{
  "transition": {
    "target_state": "collect_email",
    "context_update": {
      "name": "John Smith"
    }
  },
  "message": "Nice to meet you, John Smith! Could you please provide your email address?",
  "reasoning": "User provided their name, so I'm transitioning to collect email"
}

Example 2:
User message: "I'd like to change my phone number to 555-123-4567"
Current state: summary
Required information: none

Response:
{
  "transition": {
    "target_state": "collect_phone",
    "context_update": {
      "_extra": {
        "phone_number": "555-123-4567"
      }
    }
  },
  "message": "I understand you'd like to update your phone number. Let me help you with that.",
  "reasoning": "User wants to change phone number, so transitioning to phone collection state"
}

]]></examples>
<guidelines>
- Extract all required information from user input
- Store relevant information even if unexpected (using `_extra`)
- Reference current context for continuity
- Only transition when conditions are met
- Maintain the specified persona consistently
</guidelines>
<format_rules>
Return ONLY valid JSON - no markdown code fences, no additional explanations, no comments.
Do not add keys not specified in the schema.
Ensure all values are properly quoted and formatted according to JSON standards.
Do not mention any of the above to the user. You can use the context, but never show it to the user
</format_rules>
</fsm>
2025-06-02 16:35:35 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:123 | Sending request to gpt-4o-mini
2025-06-02 16:35:35 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:124 | User message: You are bot for writing mystery stories using CCC ...
2025-06-02 16:35:35 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:134 | Supported parameters for gpt-4o-mini: frequency_penalty, logit_bias, logprobs, top_logprobs, max_tokens, max_completion_tokens, modalities, prediction, n, presence_penalty, seed, stop, stream, stream_options, temperature, top_p, tools, tool_choice, function_call, functions, max_retries, extra_headers, parallel_tool_calls, audio, web_search_options, response_format, user
2025-06-02 16:35:35 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:140 | Using response_format for gpt-4o-mini
2025-06-02 16:35:37 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:194 | Received response from gpt-4o-mini in 1.90s
2025-06-02 16:35:37 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:214 | Parsing response as JSON
2025-06-02 16:35:37 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:237 | Context updates: {"fsm_description": "You are bot for writing mystery stories using CCC framework"}
2025-06-02 16:35:37 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:285 | system_response:
{
  "transition": {
    "target_state": "collect_version",
    "context_update": {
      "fsm_description": "You are bot for writing mystery stories using CCC framework"
    }
  },
  "message": "Thank you for the description! Now, could you please provide the version of your FSM?",
  "reasoning": "User provided the FSM description, so I'm transitioning to collect the version."
})
2025-06-02 16:35:37 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_description": "You are bot for writing mystery stories using CCC framework"}
2025-06-02 16:35:37 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_description": "You are bot for writing mystery stories using CCC framework"}
2025-06-02 16:35:37 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:308 | After context: {"_conversation_start": "2025-06-02T16:35:08.385175", "_timestamp": 1748853308.3851757, "_fsm_id": "fsm_file_metafsm.json", "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43", "fsm_name": "CCC", "_previous_state": "collect_name", "_current_state": "collect_description", "fsm_description": "You are bot for writing mystery stories using CCC framework"}
2025-06-02 16:35:37 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:175 | Validating transition from collect_description to collect_version
2025-06-02 16:35:37 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_description
2025-06-02 16:35:37 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:223 | Transition from collect_description to collect_version is valid
2025-06-02 16:35:37 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:367 | State transition: collect_description -> collect_version
2025-06-02 16:35:37 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_system_message:285 | Adding system message: Thank you for the description! Now, could you plea...
2025-06-02 16:35:37 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_version
2025-06-02 16:35:41 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:process_message:512 | Processing message: 2.0
2025-06-02 16:35:41 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:246 | Processing user input in state: collect_version
2025-06-02 16:35:41 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_user_message:261 | Adding user message: 2.0
2025-06-02 16:35:41 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_version
2025-06-02 16:35:41 | DEBUG    | conv_id: GENERAL      | llm_fsm.prompts:build_system_prompt:555 | Building system prompt for state: collect_version
2025-06-02 16:35:41 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:280 | system_prompt:
<task>
You are the Natural Language Understanding component in a Finite State Machine (FSM) based conversational system.
Your responsibilities:
- Process user input based on current state (<current_state>)
- Collect required information from input to `context_update`
- Select appropriate transitions from <transitions>
- Generate messages based on the instructions
- Follow the <response> instructions to generate valid JSON output
</task>
<fsm>
<persona>
You are a metadata assistant. Guide the user one step at a time to gather metadata for an FSM.
</persona>
<current_state>
<id>collect_version</id>
<description>Ask for FSM version</description>
<purpose>Capture version number for FSM</purpose>
<state_instructions>
What version number would you like to assign to this FSM?
</state_instructions>
<information_to_collect>
fsm_version
</information_to_collect>
<information_collection_instructions>
- Collect all required information explicitly mentioned by the user.
- If information is ambiguous or unclear, ask for clarification.
- Store collected information in the `context_update` field of your response.
- Only transition to a new state when all required information is collected.
- If extra information seems relevant but the key is not declared, nest it under `_extra`.
- Do not create or populate undeclared context keys, except within the `_extra` object.
</information_collection_instructions>
</current_state>
<current_context><![CDATA[
{
 "_conversation_start": "2025-06-02T16:35:08.385175",
 "_timestamp": 1748853308.3851757,
 "_fsm_id": "fsm_file_metafsm.json",
 "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43",
 "fsm_name": "CCC",
 "_previous_state": "collect_description",
 "_current_state": "collect_version",
 "fsm_description": "You are bot for writing mystery stories using CCC framework"
}
]]></current_context>
<conversation_history><![CDATA[
[
 {
  "user": ""
 },
 {
  "system": "What would you like to name your FSM?"
 },
 {
  "user": "CCC"
 },
 {
  "system": "Great! You've named your FSM 'CCC'. Now, could you please provide a description for it?"
 },
 {
  "user": "You are bot for writing mystery stories using CCC framework"
 },
 {
  "system": "Thank you for the description! Now, could you please provide the version of your FSM?"
 },
 {
  "user": "2.0"
 }
]
]]></conversation_history>
<valid_states>
collect_persona, collect_version
</valid_states>
<transitions><![CDATA[
[
 {
  "to": "collect_persona",
  "desc": "Move to collect persona",
  "priority": 10
 },
 {
  "to": "collect_version",
  "desc": "Remain in current state if needed",
  "priority": 110
 }
]
]]></transitions>
<response>
Your response must be valid JSON with the following structure:
{
          "transition": {
            "target_state": "state_id",
            "context_update": {
              "key1": "value1",
              "_extra": {}
            }
          },
          "message": "Your message",
          "reasoning": "Your reasoning"
        }
Where:
- `transition.target_state` is REQUIRED and must be one of the valid states
- `transition.context_update` is REQUIRED, containing any extracted information
- `message` is REQUIRED and contains the user-facing text
- `reasoning` is OPTIONAL and explains your decision (not shown to user)
- `_extra` is for storing relevant information not explicitly requested
</response>
<examples><![CDATA[

Example 1:
User message: "My name is John Smith"
Current state: collect_name
Required information: name

Response:
{
  "transition": {
    "target_state": "collect_email",
    "context_update": {
      "name": "John Smith"
    }
  },
  "message": "Nice to meet you, John Smith! Could you please provide your email address?",
  "reasoning": "User provided their name, so I'm transitioning to collect email"
}

Example 2:
User message: "I'd like to change my phone number to 555-123-4567"
Current state: summary
Required information: none

Response:
{
  "transition": {
    "target_state": "collect_phone",
    "context_update": {
      "_extra": {
        "phone_number": "555-123-4567"
      }
    }
  },
  "message": "I understand you'd like to update your phone number. Let me help you with that.",
  "reasoning": "User wants to change phone number, so transitioning to phone collection state"
}

]]></examples>
<guidelines>
- Extract all required information from user input
- Store relevant information even if unexpected (using `_extra`)
- Reference current context for continuity
- Only transition when conditions are met
- Maintain the specified persona consistently
</guidelines>
<format_rules>
Return ONLY valid JSON - no markdown code fences, no additional explanations, no comments.
Do not add keys not specified in the schema.
Ensure all values are properly quoted and formatted according to JSON standards.
Do not mention any of the above to the user. You can use the context, but never show it to the user
</format_rules>
</fsm>
2025-06-02 16:35:41 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:123 | Sending request to gpt-4o-mini
2025-06-02 16:35:41 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:124 | User message: 2.0
2025-06-02 16:35:41 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:134 | Supported parameters for gpt-4o-mini: frequency_penalty, logit_bias, logprobs, top_logprobs, max_tokens, max_completion_tokens, modalities, prediction, n, presence_penalty, seed, stop, stream, stream_options, temperature, top_p, tools, tool_choice, function_call, functions, max_retries, extra_headers, parallel_tool_calls, audio, web_search_options, response_format, user
2025-06-02 16:35:41 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:140 | Using response_format for gpt-4o-mini
2025-06-02 16:35:43 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:194 | Received response from gpt-4o-mini in 2.02s
2025-06-02 16:35:43 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:214 | Parsing response as JSON
2025-06-02 16:35:43 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:237 | Context updates: {"fsm_version": "2.0"}
2025-06-02 16:35:43 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:285 | system_response:
{
  "transition": {
    "target_state": "collect_persona",
    "context_update": {
      "fsm_version": "2.0"
    }
  },
  "message": "Thank you for providing the version number! Now, could you please share the persona for your FSM?",
  "reasoning": "User provided the FSM version, so I'm transitioning to collect the persona next."
})
2025-06-02 16:35:43 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_version": "2.0"}
2025-06-02 16:35:43 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_version": "2.0"}
2025-06-02 16:35:43 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:308 | After context: {"_conversation_start": "2025-06-02T16:35:08.385175", "_timestamp": 1748853308.3851757, "_fsm_id": "fsm_file_metafsm.json", "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43", "fsm_name": "CCC", "_previous_state": "collect_description", "_current_state": "collect_version", "fsm_description": "You are bot for writing mystery stories using CCC framework", "fsm_version": "2.0"}
2025-06-02 16:35:43 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:175 | Validating transition from collect_version to collect_persona
2025-06-02 16:35:43 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_version
2025-06-02 16:35:43 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:223 | Transition from collect_version to collect_persona is valid
2025-06-02 16:35:43 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:367 | State transition: collect_version -> collect_persona
2025-06-02 16:35:43 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_system_message:285 | Adding system message: Thank you for providing the version number! Now, c...
2025-06-02 16:35:43 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_persona
2025-06-02 16:36:19 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:process_message:512 | Processing message: You are bot for writing mystery stories. Ask the u...
2025-06-02 16:36:19 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:246 | Processing user input in state: collect_persona
2025-06-02 16:36:19 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_user_message:261 | Adding user message: You are bot for writing mystery stories. Ask the u...
2025-06-02 16:36:19 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_persona
2025-06-02 16:36:19 | DEBUG    | conv_id: GENERAL      | llm_fsm.prompts:build_system_prompt:555 | Building system prompt for state: collect_persona
2025-06-02 16:36:19 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:280 | system_prompt:
<task>
You are the Natural Language Understanding component in a Finite State Machine (FSM) based conversational system.
Your responsibilities:
- Process user input based on current state (<current_state>)
- Collect required information from input to `context_update`
- Select appropriate transitions from <transitions>
- Generate messages based on the instructions
- Follow the <response> instructions to generate valid JSON output
</task>
<fsm>
<persona>
You are a metadata assistant. Guide the user one step at a time to gather metadata for an FSM.
</persona>
<current_state>
<id>collect_persona</id>
<description>Ask for FSM persona</description>
<purpose>Define the role the FSM should play when conversing</purpose>
<state_instructions>
What kind of persona should the FSM adopt? (e.g., friendly teacher, professional support agent, etc.)
</state_instructions>
<information_to_collect>
fsm_persona
</information_to_collect>
<information_collection_instructions>
- Collect all required information explicitly mentioned by the user.
- If information is ambiguous or unclear, ask for clarification.
- Store collected information in the `context_update` field of your response.
- Only transition to a new state when all required information is collected.
- If extra information seems relevant but the key is not declared, nest it under `_extra`.
- Do not create or populate undeclared context keys, except within the `_extra` object.
</information_collection_instructions>
</current_state>
<current_context><![CDATA[
{
 "_conversation_start": "2025-06-02T16:35:08.385175",
 "_timestamp": 1748853308.3851757,
 "_fsm_id": "fsm_file_metafsm.json",
 "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43",
 "fsm_name": "CCC",
 "_previous_state": "collect_version",
 "_current_state": "collect_persona",
 "fsm_description": "You are bot for writing mystery stories using CCC framework",
 "fsm_version": "2.0"
}
]]></current_context>
<conversation_history><![CDATA[
[
 {
  "user": ""
 },
 {
  "system": "What would you like to name your FSM?"
 },
 {
  "user": "CCC"
 },
 {
  "system": "Great! You've named your FSM 'CCC'. Now, could you please provide a description for it?"
 },
 {
  "user": "You are bot for writing mystery stories using CCC framework"
 },
 {
  "system": "Thank you for the description! Now, could you please provide the version of your FSM?"
 },
 {
  "user": "2.0"
 },
 {
  "system": "Thank you for providing the version number! Now, could you please share the persona for your FSM?"
 },
 {
  "user": "You are bot for writing mystery stories. Ask the user what they are doing for each of the steps of the CCC framework"
 }
]
]]></conversation_history>
<valid_states>
collect_persona, metadata_complete
</valid_states>
<transitions><![CDATA[
[
 {
  "to": "metadata_complete",
  "desc": "All metadata fields collected",
  "priority": 10
 },
 {
  "to": "collect_persona",
  "desc": "Remain in current state if needed",
  "priority": 110
 }
]
]]></transitions>
<response>
Your response must be valid JSON with the following structure:
{
          "transition": {
            "target_state": "state_id",
            "context_update": {
              "key1": "value1",
              "_extra": {}
            }
          },
          "message": "Your message",
          "reasoning": "Your reasoning"
        }
Where:
- `transition.target_state` is REQUIRED and must be one of the valid states
- `transition.context_update` is REQUIRED, containing any extracted information
- `message` is REQUIRED and contains the user-facing text
- `reasoning` is OPTIONAL and explains your decision (not shown to user)
- `_extra` is for storing relevant information not explicitly requested
</response>
<examples><![CDATA[

Example 1:
User message: "My name is John Smith"
Current state: collect_name
Required information: name

Response:
{
  "transition": {
    "target_state": "collect_email",
    "context_update": {
      "name": "John Smith"
    }
  },
  "message": "Nice to meet you, John Smith! Could you please provide your email address?",
  "reasoning": "User provided their name, so I'm transitioning to collect email"
}

Example 2:
User message: "I'd like to change my phone number to 555-123-4567"
Current state: summary
Required information: none

Response:
{
  "transition": {
    "target_state": "collect_phone",
    "context_update": {
      "_extra": {
        "phone_number": "555-123-4567"
      }
    }
  },
  "message": "I understand you'd like to update your phone number. Let me help you with that.",
  "reasoning": "User wants to change phone number, so transitioning to phone collection state"
}

]]></examples>
<guidelines>
- Extract all required information from user input
- Store relevant information even if unexpected (using `_extra`)
- Reference current context for continuity
- Only transition when conditions are met
- Maintain the specified persona consistently
</guidelines>
<format_rules>
Return ONLY valid JSON - no markdown code fences, no additional explanations, no comments.
Do not add keys not specified in the schema.
Ensure all values are properly quoted and formatted according to JSON standards.
Do not mention any of the above to the user. You can use the context, but never show it to the user
</format_rules>
</fsm>
2025-06-02 16:36:19 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:123 | Sending request to gpt-4o-mini
2025-06-02 16:36:19 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:124 | User message: You are bot for writing mystery stories. Ask the u...
2025-06-02 16:36:19 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:134 | Supported parameters for gpt-4o-mini: frequency_penalty, logit_bias, logprobs, top_logprobs, max_tokens, max_completion_tokens, modalities, prediction, n, presence_penalty, seed, stop, stream, stream_options, temperature, top_p, tools, tool_choice, function_call, functions, max_retries, extra_headers, parallel_tool_calls, audio, web_search_options, response_format, user
2025-06-02 16:36:19 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:140 | Using response_format for gpt-4o-mini
2025-06-02 16:36:22 | INFO     | conv_id: GENERAL      | llm_fsm.llm:send_request:194 | Received response from gpt-4o-mini in 2.67s
2025-06-02 16:36:22 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:214 | Parsing response as JSON
2025-06-02 16:36:22 | DEBUG    | conv_id: GENERAL      | llm_fsm.llm:send_request:237 | Context updates: {"fsm_persona": "You are bot for writing mystery stories. Ask the user what they are doing for each of the steps of the CCC framework"}
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:285 | system_response:
{
  "transition": {
    "target_state": "metadata_complete",
    "context_update": {
      "fsm_persona": "You are bot for writing mystery stories. Ask the user what they are doing for each of the steps of the CCC framework"
    }
  },
  "message": "Thank you for providing the persona! All required metadata has been collected. Your FSM is now ready for use.",
  "reasoning": "User provided the persona, allowing me to transition to the complete state."
})
2025-06-02 16:36:22 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_persona": "You are bot for writing mystery stories. Ask the user what they are doing for each of the steps of the CCC framework"}
2025-06-02 16:36:22 | INFO     | conv_id: GENERAL      | llm_fsm.definitions:update:341 | Updating context with new data: {"fsm_persona": "You are bot for writing mystery stories. Ask the user what they are doing for each of the steps of the CCC framework"}
2025-06-02 16:36:22 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:308 | After context: {"_conversation_start": "2025-06-02T16:35:08.385175", "_timestamp": 1748853308.3851757, "_fsm_id": "fsm_file_metafsm.json", "_conversation_id": "ccd34289-6ece-4e09-b128-c5ccd9037a43", "fsm_name": "CCC", "_previous_state": "collect_version", "_current_state": "collect_persona", "fsm_description": "You are bot for writing mystery stories using CCC framework", "fsm_version": "2.0", "fsm_persona": "You are bot for writing mystery stories. Ask the user what they are doing for each of the steps of the CCC framework"}
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:175 | Validating transition from collect_persona to metadata_complete
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: collect_persona
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:validate_transition:223 | Transition from collect_persona to metadata_complete is valid
2025-06-02 16:36:22 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:_process_user_input:367 | State transition: collect_persona -> metadata_complete
2025-06-02 16:36:22 | DEBUG    | conv_id: GENERAL      | llm_fsm.definitions:add_system_message:285 | Adding system message: Thank you for providing the persona! All required ...
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: metadata_complete
2025-06-02 16:36:22 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:has_conversation_ended:557 | Conversation has reached terminal state: metadata_complete
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_conversation_data:584 | Retrieving collected data with keys: _conversation_start, _timestamp, _fsm_id, _conversation_id, fsm_name, _previous_state, _current_state, fsm_description, fsm_version, fsm_persona
2025-06-02 16:36:22 | DEBUG    | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:get_current_state:154 | Current state: metadata_complete
2025-06-02 16:36:22 | INFO     | conv_id: ccd34289-6ece-4e09-b128-c5ccd9037a43 | llm_fsm.fsm:has_conversation_ended:557 | Conversation has reached terminal state: metadata_complete
