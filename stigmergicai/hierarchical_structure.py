import json
from openai import AzureOpenAI
from agency_swarm import set_openai_client
from agency_swarm.tools import BaseTool
from agency_swarm import Agent, Agency
from pydantic import Field
from gradio_patch import demo_gradio

class Human(BaseTool):
    response : str = Field(description="a response generated by the agent")
    def run(self):
        ans = input('response: ' + "\n" + self.response + ":\n")
        return ans
    
client = AzureOpenAI()

set_openai_client(client)

def load_threads():
    f = open("thread.json", "r")
    return json.loads(f.read())

def save_threads(thread):
    with open("thread.json", "w")  as f:
        f.write(json.dumps(thread))

    
def load_settings():
    f = open("hierarchical_settings.json", "r")
    return json.loads(f.read())

def save_settings(new_settings):
    with open("hierarchical_settings.json", "w")  as f:
        f.write(json.dumps(new_settings))


cmo = Agent(name="cmo", description = "I am the CMO", instruction= "As a CMO, you are in charge of sales and product department. You must not anwer any qustions by yourself. You should always ask both [sales, product]. Do not deviate from the given instruction, do not add extra terms")
cto = Agent(name="cmo", description = "I am the CTO", instruction= "As a CTO, you are in charge of engineering and ai department. You must not anwer any qustions by yourself. You should always ask both [engineering, ai]. Do not deviate from the given instruction, do not add extra terms")
ceo = Agent(name="ceo", description = "I am the CEO", instruction= "As a CEO, you do not do anything by yourself. You should ask both: [cmo, cto] to complete the task. After you collect all the answers, call the human tool to validate the quality of the answer. If the answer is not good enough, you should send the feedback to relative team member to regenerate answers. Do not deviate from the given instruction, do not add extra terms")
sales = Agent(name = "sales", descripton = "I am the sales department head ", instructions = " As a sales department head, you should complete the given task from the perspective of the sales department. If the task is irrelevant to your department, then refuse it. ")
product = Agent(name = "product", descripton = "I am the product department head ", instructions = " As a product department head, you should complete the given task from the perspective of the sales department. If the task is irrelevant to your department, then refuse it. ")
engineering = Agent(name = "engineering", descripton = "I am the engineering department head ", instructions = " As the engineering department head, you should complete the given task from the perspective of the sales department. If the task is irrelevant to your department, then refuse it. ")
ai = Agent(name = "ai", descripton = "I am the ai department head ", instructions = " As the ai department head, you should complete the given task from the perspective of the sales department. If the task is irrelevant to your department, then refuse it. ")

Agency.demo_gradio = demo_gradio
agency = Agency([ceo, cto, cmo, sales, product, ai, engineering, [ceo, cto], [ceo, cmo], [cmo, sales], [cto, engineering], [cto, ai]], shared_instructions = "You are part of a B2C company hierarchy: ceo supervises [cmo, cto], cto supervises [engineering,market ], cmo supervises [sales, product] \n ",
                threads_callbacks = {
                    "load" : lambda : load_threads(), 
                    "save" : lambda new_threads: save_threads(new_threads)
                }, 
                settings_callback = {
                    'load' : lambda: load_settings(), 
                    'save' : lambda new_settings: save_settings(new_settings)
                }, 
                )

