import json
from openai import AzureOpenAI
from agency_swarm import set_openai_client
from agency_swarm.tools import BaseTool
from agency_swarm import Agent, Agency
from pydantic import Field

class Human(BaseTool):
    question : str = Field(description="a question generated by the agent")
    report  : str = Field(description="a report generated by the agent")
    def run(self):
        ans = input(self.report + '\n' + self.question + ':\n')
        return ans
    

client = AzureOpenAI()

set_openai_client(client)

def load_threads():
    f = open("thread.json", "r")
    return json.loads(f.read())

def save_threads(thread):
    with open("thread.json", "w")  as f:
        f.write(json.dumps(thread))


agent = Agent(name = "agent", description = "I am a simple agent")

ceo = Agent(name = "ceo", description = "I am the CEO",
             instructions = "as a CEO, you should ask your agent to complete the task, then check if the result is good enough by calling human tool. If it is not good enough, ask your agent to generate an answer again with additional instructions given", 
             tools = [Human])

agency = Agency([ceo, [ceo, agent]], shared_instructions = 'You are part of an ai development agency.\n\n', 
                threads_callbacks = {
                    'load' : lambda : load_threads(),
                    'save' : lambda new_threads : save_threads(new_threads)
                }, 
                settings_path = 'my_settings.json')

response = agency.get_completion("What is your current understanding of the instruction?", yield_messages = False)

print(response)


